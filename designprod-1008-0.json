{
    "Database": {
        "GetHeadInfo": "Usage: info = Database.GetHeadInfo(head_id)",
        "GetHeadAccessoryInfo": "Usage: info = Database.GetHeadAccessoryInfo(headacc_id)"
    },
    "Market": {
        "Toggle": "",
        "SellItem": "Invalid item guid",
        "FillBuyOrder": "bad argument #3 to '?' (number expected, got no value)",
        "SellResourceStack": "bad argument #2 to '?' (string expected, got no value)"
    },
    "Encounter": {
        "GetPoiInfo": "",
        "GetProxyInfo": "",
        "GetProxyList": "",
        "GetBombDirection": "",
        "GetStartTime": "",
        "GetCapturePointInfo": "",
        "GetEncounterInfo": "",
        "GetTeamInfo": "",
        "RequestPublicInfo": "Parameter 1 is not a valid encounter ID"
    },
    "Border": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPadding": "Usage: padding = BORDER:GetPadding()",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "SetPadding": "Usage: BORDER:SetPadding(padding)",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "Show": "Usage: WIDGET:Show([vis])",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetType": "Usage: type = WIDGET:GetType()",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "GetId": "Usage: id = WIDGET:GetId()",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetText": "Usage: text = WIDGET:GetText()",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "Chat": {
        "SendWhisperText": "USAGE: success = Chat.SendWhisperText(username, message)",
        "JoinLanguageZoneChat": "",
        "WriteInstanceKey": "",
        "GetChannelList": "",
        "SendChannelText": "USAGE: success = Chat.SendChannelText(channel, message)",
        "IsConnected": "",
        "GetLocalUserInfo": "",
        "GetUserInfo": "USAGE: userinfo = Chat.GetUserInfo(user)",
        "CensorProfanity": "USAGE: censoredString = Chat.CensorProfanity( toCensor )",
        "CheckSameInstance": "USAGE: bool = Chat.CheckSameInstance(player_id, instance_key)"
    },
    "ActivityDirector": {
        "LogLongTimeWithoutPush": "",
        "LogDirectActivityRequest": "",
        "RequestMission": "Usage: ActivityDirector.RequestMission(missionId);",
        "LogActivityPush": "Usage: ActivityDirector.LogActivityPush(boredGauge);"
    },
    "MultiChoice": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "Query": "Usage: text, value, idx = WIDGET:Query();",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "GetText": "Usage: text = WIDGET:GetText()",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "SetOption": "Usage: success = WIDGET:SetOption(index, name, [value, fg-color, bg-color);",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "Show": "Usage: WIDGET:Show([vis])",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "RemoveOption": "Usage: WIDGET:RemoveOption(value)",
        "GetId": "Usage: id = WIDGET:GetId()",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "AddOption": "Usage: idx = WIDGET:AddOption(name, [value, selected, fg-color, bg-color]);",
        "SelectOption": "Usage: success = WIDGET:Select(index, selected[, fireChange]);",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "SetCaption": "Usage: success = WIDGET:SetCaption(caption);",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "IsSelected": "Usage: success = WIDGET:IsSelected(index);",
        "ClearOptions": "Usage: WIDGET:ClearOptions()",
        "GetCaption": "Usage: success = WIDGET:GetCaption();",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "StillArt": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "GetTexture": "Invalid Element - Element Destroyed?",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "InvertHorizontal": "Invalid Element - Element Destroyed?",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "InvertVertical": "Invalid Element - Element Destroyed?",
        "GetRegion": "Invalid Element - Element Destroyed?",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "Show": "Usage: WIDGET:Show([vis])",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "SetRegion": "Usage: STILL_ART:SetRegion(region)",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "GetId": "Usage: id = WIDGET:GetId()",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "SetTexture": "Usage: STILL_ART:SetTexture(name [, region])",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "GetText": "Usage: text = WIDGET:GetText()",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "KeyCatcher": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "Show": "Usage: WIDGET:Show([vis])",
        "ListenForKey": "Invalid Element - Element Destroyed?",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "GetAlt": "Invalid Element - Element Destroyed?",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "StopListening": "Invalid Element - Element Destroyed?",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "GetId": "Usage: id = WIDGET:GetId()",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "GetKeyCode": "Invalid Element - Element Destroyed?",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetText": "Usage: text = WIDGET:GetText()",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "Playback": {
        "StartGamePlayback": "Usage: System.StartGamePlayback( adventureMatchGuid[, isPvp = true, sourceId, sourcePrefix] )"
    },
    "Voip": {
        "SetOutputVolume": "USAGE: Voip.SetOutputVolume(int volume)",
        "GetSelectedMicrophone": "",
        "SetAutoJoinSquadConference": "",
        "SelectAudioOutput": "USAGE: Voip.SelectAudioOutput(string)",
        "GetDefaultMicrophone": "",
        "GetSelectedAudioOutput": "",
        "GetDefaultAudioOutput": "",
        "GetOutputVolume": "",
        "SelectMicrophone": "USAGE: Voip.SelectMicrophone(string)",
        "SetInputVolume": "USAGE: Voip.SetInputVolume(int volume)",
        "IsEnabled": "",
        "GetInputVolume": "",
        "GetAudioOutputs": "",
        "GetMicrophones": ""
    },
    "Radio": {
        "StartRadioWithSecureDialogID": "Usage: Radio.StartRadioWithSecureDialogID(radio_id_sdb)"
    },
    "TwitchTV": {
        "Status": "",
        "Start": "",
        "Stop": "",
        "Auth": "Usage: System.TwitchAuth(password)"
    },
    "FocusBox": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "SetMask": "Usage: FOCUS_BOX:SetMask([mask_name])",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "Show": "Usage: WIDGET:Show([vis])",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "GetText": "Usage: text = WIDGET:GetText()",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "SetAsLastClickRecipient": "Invalid Element - Element Destroyed?",
        "GetId": "Usage: id = WIDGET:GetId()",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "IgnoreLastClick": "Invalid Element - Element Destroyed?",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "SetFocusable": "Usage: FOCUS_BOX:SetFocusable(wants_focus)",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "Friends": {
        "Decline": "USAGE: Friends.RemoveFriend(user)",
        "Add": "USAGE: Friends.AddFriend(user)",
        "UpdateMyPresence": "",
        "Remove": "USAGE: Friends.RemoveFriend(user)",
        "GetList": "",
        "Accept": "USAGE: Friends.AddFriend(user)",
        "GetRequest": ""
    },
    "PanelFrame": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetInitialDims": "Usage: dims = FRAME:GetInitialDims();",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "GetDims": "Usage: dims = FRAME:GetDims();",
        "QueueMove": "Usage: FRAME:QueueMove(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "MoveTo": "Usage: FRAME:MoveTo(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "GetCursorPos": "Usage: {x,y} = FRAME:GetCursorPos();",
        "GetChild": "Usage: child = FRAME:GetChild(name or index)",
        "SetFocus": "Usage: success = FRAME:SetFocus();",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: FRAME:SetParam(\"name\", value);",
        "GetInfo": "Usage: name, type = FRAME:GetInfo()",
        "ReleaseFocus": "Usage: success = FRAME:ReleaseFocus();",
        "SetInteractable": "Usage: FRAME:SetInteractable(true/false);",
        "BindEvent": "Usage: FRAME:BindEvent(event_name, function_name or function_ref);",
        "GetChildCount": "Usage: count = FRAME:GetChildCount()",
        "IsVisible": "Usage: vis = FRAME:IsVisible()",
        "Show": "Usage: success = FRAME:Show([vis,delay])",
        "FinishParam": "Usage: FRAME:FinishParam(\"name\");",
        "GetDepth": "Usage: depth = FRAME:GetDepth();",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "GetName": "Usage: name = FRAME:GetName()",
        "GetTag": "Usage: tag = FRAME:GetTag()",
        "SetDepth": "Usage: FRAME:SetDepth(depth);",
        "ParamTo": "Usage: FRAME:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "CycleParam": "Usage: FRAME:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "SetDims": "Usage: FRAME:SetDims(dims);",
        "Hide": "Usage: success = FRAME:Hide([invis, delay])",
        "QueueParam": "Usage: FRAME:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: FRAME:RepeatParamAnims(\"name\", num_previous);",
        "GetParam": "Usage: value = FRAME:GetParam(\"name\");"
    },
    "TextInput": {
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "GetText": "Usage: text = WIDGET:GetText()",
        "SetFont": "Usage: TEXT:SetFont(fontName)",
        "Show": "Usage: WIDGET:Show([vis])",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "GetFont": "Usage: fontName = TEXT:GetFont()",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "GetCaret": "Usage: caretIdx = TEXTINPUT:GetCaret()",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "GetTextDims": "Usage: {width, height, top, left, right, bottom} = TEXTINPUT:GetTextDims([testString, clipping])",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "SetKerningMult": "Usage: TEXTINPUT:SetKerningMult(mult)",
        "SetAlignment": "Usage: TEXTINPUT:SetAlignment(dir, alignment)",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");",
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetAlignment": "Usage: TEXTINPUT:GetAlignment(dir,align)",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "SetTextKey": "Usage: TEXTINPUT:SetTextKey(key)",
        "SetCaret": "Usage: TEXTINPUT:SetCaret(position)",
        "GetName": "Usage: name = WIDGET:GetName()",
        "GetLineHeight": "Usage: pixels = TEXTINPUT:GetLineHeight()",
        "GetCaretLineNum": "Usage: caretLineNum = TEXTINPUT:GetCaretLineNum()",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "SelectText": "Usage: TEXTINPUT:SelectText(start,end)",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "SetWhitespace": "Usage: TEXT:SetWhitespace(whitespace)",
        "GetNumLines": "Usage: numlines = TEXTINPUT:GetNumLines()",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "GetId": "Usage: id = WIDGET:GetId()",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "SetMasked": "Usage: TEXT:SetMasked(masked)",
        "SetLeadingMult": "Usage: TEXTINPUT:SetLeadingMult(mult)",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();"
    },
    "OverlayFrame": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetInitialDims": "Usage: dims = FRAME:GetInitialDims();",
        "GetDims": "Usage: dims = FRAME:GetDims();",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "Hide": "Usage: success = FRAME:Hide([invis, delay])",
        "GetChild": "Usage: child = FRAME:GetChild(name or index)",
        "GetChildCount": "Usage: count = FRAME:GetChildCount()",
        "QueueMove": "Usage: FRAME:QueueMove(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: FRAME:SetParam(\"name\", value);",
        "GetInfo": "Usage: name, type = FRAME:GetInfo()",
        "FinishParam": "Usage: FRAME:FinishParam(\"name\");",
        "SetStretch": "Usage: FRAME:SetStretch(stretch);",
        "BindEvent": "Usage: FRAME:BindEvent(event_name, function_name or function_ref);",
        "Show": "Usage: success = FRAME:Show([vis,delay])",
        "IsVisible": "Usage: vis = FRAME:IsVisible()",
        "GetTag": "Usage: tag = FRAME:GetTag()",
        "SetTexture": "Usage: FRAME:SetTexture(texture [, region]);",
        "GetDepth": "Usage: depth = FRAME:GetDepth();",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "GetName": "Usage: name = FRAME:GetName()",
        "MoveTo": "Usage: FRAME:MoveTo(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "SetDepth": "Usage: FRAME:SetDepth(depth);",
        "ParamTo": "Usage: FRAME:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "CycleParam": "Usage: FRAME:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "SetDims": "Usage: FRAME:SetDims(dims);",
        "SetEatsMice": "Usage: FRAME:SetEatsMice(eatsMice);",
        "QueueParam": "Usage: FRAME:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: FRAME:RepeatParamAnims(\"name\", num_previous);",
        "GetParam": "Usage: value = FRAME:GetParam(\"name\");"
    },
    "HTTP": {
        "IsRequestPending": "",
        "IssueRequest": "Usage: HTTP.IssueRequest(url, HTTP METHOD ,params_table, callback);",
        "NumOfPendingRequests": ""
    },
    "WebImage": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "SetUrl": "Usage: WEB_IMAGE:SetUrl(url, [callback])",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "GetUrl": "Invalid Element - Element Destroyed?",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "Show": "Usage: WIDGET:Show([vis])",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "ClearUrl": "Usage: WEB_IMAGE:ClearUrl()",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "GetId": "Usage: id = WIDGET:GetId()",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetText": "Usage: text = WIDGET:GetText()",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "WebFrame": {
        "GetCursorPos": "Usage: {x,y} = FRAME:GetCursorPos();",
        "AddWebCallback": "Usage: FRAME:AddWebCallback('name', func)",
        "SetFocus": "Usage: success = FRAME:SetFocus();",
        "IsTypeTarget": "usage: FRAME:IsTypeTarget(boolean)",
        "Hide": "Usage: success = FRAME:Hide([invis, delay])",
        "GetUrl": "Invalid Element - Element Destroyed?",
        "GetDepth": "Usage: depth = FRAME:GetDepth();",
        "GetName": "Usage: name = FRAME:GetName()",
        "SetDepth": "Usage: FRAME:SetDepth(depth);",
        "CycleParam": "Usage: FRAME:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "LoadUrl": "Invalid Element - Element Destroyed?",
        "GetNaturalDims": "Invalid Element - Element Destroyed?",
        "SetUrlFilters": "Usage: FRAME:SetUrlFilters('protocol://host/somepath/*', 'filter2', ...)",
        "SetNaturalDims": "bad argument #1 to '?' (number expected, got no value)",
        "LogWebRequests": "usage: FRAME:LogWebRequests(boolean)",
        "GetDims": "Usage: dims = FRAME:GetDims();",
        "Show": "Usage: success = FRAME:Show([vis,delay])",
        "GetParam": "Usage: value = FRAME:GetParam(\"name\");",
        "SetDims": "Usage: FRAME:SetDims(dims);",
        "GetChildCount": "Usage: count = FRAME:GetChildCount()",
        "MoveTo": "Usage: FRAME:MoveTo(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: FRAME:SetParam(\"name\", value);",
        "GetInfo": "Usage: name, type = FRAME:GetInfo()",
        "ReleaseFocus": "Usage: success = FRAME:ReleaseFocus();",
        "CallWebFunc": "Usage: FRAME:CallWebFunc('name', ...)",
        "BindEvent": "Usage: FRAME:BindEvent(event_name, function_name or function_ref);",
        "AddWebValue": "Usage: FRAME:AddWebValue('name', value)",
        "IsVisible": "Usage: vis = FRAME:IsVisible()",
        "FinishParam": "Usage: FRAME:FinishParam(\"name\");",
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "QueueMove": "Usage: FRAME:QueueMove(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "GetTag": "Usage: tag = FRAME:GetTag()",
        "SetInteractable": "Usage: FRAME:SetInteractable(true/false);",
        "ParamTo": "Usage: FRAME:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "ClearCookies": "usage: FRAME:LogWebRequests()",
        "GetChild": "Usage: child = FRAME:GetChild(name or index)",
        "EnableTypeTarget": "usage: FRAME:EnableTypeTarget(boolean)",
        "QueueParam": "Usage: FRAME:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: FRAME:RepeatParamAnims(\"name\", num_previous);",
        "GetInitialDims": "Usage: dims = FRAME:GetInitialDims();"
    },
    "Paperdoll": {
        "ApplyPlayerCharacterInfo": "",
        "SetSpin": "Usage: Paperdoll.SetSpin(degreesPerSecond)",
        "UpdateGender": "",
        "UpdateHairColor": "",
        "GetDims": "",
        "GetRotation": "",
        "SetTeam": "Usage: success = Paperdoll.SetTeam(team_id)",
        "LoadItem": "Usage: success = Paperdoll.LoadItem(itemId)",
        "Center": "Paperdoll.Center(mode = ['center' | 'fit' | 'spherefit' | 'spin_z_fit']",
        "UpdateFacialHairID": "",
        "PlayEmote": "Usage: Paperdoll.PlayEmote(emoteName)",
        "GetScale": "",
        "GetSpin": "",
        "Create_Login": "Usage: width, height = Paperdoll.Create_Login(width, height, infoTable",
        "SetRotation": "Usage: Paperdoll.SetRotation(degrees)",
        "GetCharacterInfo": "Paperdoll is not available",
        "Release": "",
        "SetPosition": "Usage: Paperdoll.SetPosition(x,y,z)",
        "UpdateEyeColor": "",
        "Create": "Usage: width, height = Paperdoll.Create(width, height, type = 'entity' (default) or 'item', id = entity or item id (default: local character's entity id), bloom (0=off, 1=on (default))",
        "SetEquipment": "Usage: success = Paperdoll.SetEquipment(table[, reset=true])",
        "UpdateSize": "",
        "IsStreaming": "",
        "UpdateSkinColor": "",
        "UpdateHeadID": "",
        "GetPosition": "",
        "UpdateHairID": "",
        "SetDisplayLod": "Usage: Paperdoll.SetDisplayLod(LOD);",
        "SetScale": "Usage: Paperdoll.SetScale(scale)"
    },
    "Lobby": {
        "GetMatchParameters": "",
        "GetInvites": "",
        "ReadyCheck": "Not in a challenge\nUSAGE: Lobby.ReadyCheck()",
        "SetPowerPrivilege": "USAGE: Lobby.SetPowerPrivilege(name, privileged)",
        "SwapTeam": "USAGE: Lobby.SwapTeam(playerName1, playerName2 (optional)",
        "Leave": "",
        "AcceptInvite": "USAGE: Lobby.AcceptInvite(name)",
        "Invite": "USAGE: Lobby.Invite(name, team (or \"spectator\")",
        "SetZoneId": "USAGE: Lobby.SetZoneId(zoneId)",
        "Create": "",
        "SetTeam": "USAGE: Lobby.SetTeam(playerName, team (or \"spectator\")",
        "GetAvailableMaps": "",
        "GetRoster": "",
        "Kick": "USAGE: Lobby.Kick(name)",
        "SetReady": "",
        "StartMatch": "Insufficient privileges\nUSAGE: Lobby.StartMatch()",
        "DeclineInvite": "USAGE: Lobby.DeclineInvite(name)"
    },
    "DropTarget": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "GetDropInfo": "Usage: data, type = WIDGET:GetDropInfo();",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "Show": "Usage: WIDGET:Show([vis])",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "SetAcceptTypes": "Usage: WIDGET:SetAcceptTypes(string);",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "GetId": "Usage: id = WIDGET:GetId()",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetText": "Usage: text = WIDGET:GetText()",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "Vehicle": {
        "GetVitals": "Not in vehicle",
        "GetVehicleInfo": "Usage: Vehicle.GetVehicleInfo(vehicleId)"
    },
    "Component": {
        "GetCursorPos": "",
        "UnbindEvent": "Usage: Component.UnbindEvent( event )",
        "LookupText": "USAGE: text = Component.LookupText(key, params)",
        "LookupSound": "USAGE: string = Component.LookupSound(key)",
        "SaveSetting": "Usage: Component.SaveSetting(key, value)",
        "GetInputMode": "",
        "GetRandomPlayerName": "",
        "CreateAnchor": "",
        "GetTitleSafe": "",
        "BeginDragDrop": "Usage: success = Component.BeginDragDrop(dragtype, dragdata, [callback])",
        "EndDragDrop": "Usage: Component.EndDragDrop(dropped)",
        "CreateFrame": "Usage: FRAME = Component.CreateFrame(type[, name])",
        "SetLockoutTag": "Usage: success = Component.SetLockoutTag(lockoutTag)",
        "BindEvent": "Usage: Component.BindEvent( event, function )",
        "RemoveLocalizationTracking": "USAGE: text = Component.RemoveLocalizationTracking(string)",
        "SetInputMode": "Usage: Component.SetInputMode(\"modestr\")",
        "GetWidget": "USAGE: widget = Component.GetWidget(id)",
        "GetUserBoundKey": "Usage: keycode = Component.GetUserBoundKey(name)",
        "IsWidget": "Usage: Component.IsWidget(WIDGET)",
        "GetFrame": "Usage: frame = Component.GetFrame(name)",
        "GetSettingKeys": "",
        "GetDragInfo": "",
        "RegisterKeyAction": "Usage: Component.RegisterKeyAction(name, function[, trigger='press'])",
        "RemoveWidget": "Usage: Component.RemoveWidget(WIDGET)",
        "GetMouseButtonState": "",
        "RemoveFrame": "Usage: Component.RemoveFrame(FRAME)",
        "RemoveRenderTarget": "Usage: success = Component.RemoveRenderTarget(name)",
        "PostMessage": "Usage: success = Component.PostMessage(\"component_name:frame_name\", type_str [, data_str])",
        "FosterWidget": "Usage: success = Component.FosterWidget(child_widget, parent_widget[, fosterLevel])",
        "ApplyLanguageRules": "USAGE: stringWithRulesApplied = Component.ApplyLanguageRules(stringToApplyRules)",
        "SetRenderTargetRegion": "Usage: success = Component.SetRenderTargetRegion(textureName, idx, regionName, top, left, right, bottom)",
        "CreateSceneObject": "Usage: SCENEOBJECT = Component.CreateSceneObject(record_ref[,name, scene])",
        "SetTextInput": "",
        "ClearGlobalCursorOverride": "",
        "BindUserKey": "Usage: keyCode = Component.BindUserKey(name, keyCode)",
        "SetGlobalCursorOverride": "Usage: Component.SetGlobalCursorOverride(\"cursorString\", bool widgetOverride)",
        "CreateWidget": "Usage: WIDGET = Component.CreateWidget(blueprint, parent[, name])",
        "GetFocusWidgetIMEPosition": "",
        "RemoveSceneObject": "Usage: Component.RemoveSceneObject(SCENE_OBJECT)",
        "CreateRenderTarget": "Usage: success = Component.CreateRenderTarget(name, width, height[, regions])",
        "GetPanelFocus": "",
        "GetInfo": "",
        "GenerateEvent": "USAGE: Component.GenerateEvent(eventName, [argtable])",
        "LookupColor": "USAGE: {red, green, blue, alpha, rgb, argb} = Component.LookupColor(key)",
        "GetSetting": "Usage: value = Component.GetSetting([Component], key)",
        "SetDragAccept": "Usage: Component.SetDragAccept(accept)",
        "AreUserKeybindsActive": "",
        "RemoveAnchor": "Usage: Component.RemoveAnchor(ANCHOR)",
        "GetTextureInfo": "Usage: dims = Component.GetTextureInfo(Texture[, Region])",
        "HasPanelFocus": "",
        "ActivateUserKeybinds": "Usage: Component.ActivateUserKeybinds(active)",
        "GetScreenSize": "",
        "IsAddon": "",
        "UnregisterKeyAction": "Usage: Component.UnregisterKeyAction(keyActionName)"
    },
    "X360": {
        "DisplayKeyboardUI": ""
    },
    "MapMarker": {
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "GetText": "Usage: text = WIDGET:GetText()",
        "GetTargetId": "Invalid Element - Element Destroyed?",
        "GetRegion": "Invalid Element - Element Destroyed?",
        "SetEdgeTracking": "Usage: MAPMARKER:SetEdgeTracking(true/false)",
        "Show": "Usage: WIDGET:Show([vis])",
        "GetEdgeTracking": "Usage: tracking = MAPMARKER:GetEdgeTracking()",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "SetRegion": "Usage: index = MAPMARKER:SetRegion(region)",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "GetId": "Usage: id = WIDGET:GetId()",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "GetMapping": "Usage: mapping = MAPMARKER:GetMapping()",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "SetTargetId": "Usage: MAPMARKER:SetTargetId(targetId)",
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "GetTexture": "Invalid Element - Element Destroyed?",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "GetAnchorId": "Invalid Element - Element Destroyed?",
        "GetName": "Usage: name = WIDGET:GetName()",
        "SetAnchorId": "Usage: MAPMARKER:SetAnchorId(targetId)",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "SetMapping": "Usage: MAPMARKER:SetMapping(mapping)",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "SetPosition": "Usage: MAPMARKER:SetPosition(x,y,z)",
        "IsOffMap": "Usage: out = MAPMARKER:IsOffMap()",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "SetTexture": "Usage: index = MAPMARKER:SetTexture(texture [, region])",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");",
        "GetPosition": "Invalid Element - Element Destroyed?",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();"
    },
    "TrackingFrame": {
        "GetBounds": "Invalid Element - Element Destroyed?",
        "SetScene": "Invalid Element - Element Destroyed?",
        "SetBounds": "Usage: FRAME:SetBounds(left, top, width, height)",
        "BindEvent": "Usage: FRAME:BindEvent(event_name, function_name or function_ref);",
        "GetDepth": "Usage: depth = FRAME:GetDepth();",
        "AddToScene": "Invalid Element - Element Destroyed?",
        "GetName": "Usage: name = FRAME:GetName()",
        "Show": "Usage: success = FRAME:Show([vis,delay])",
        "CycleParam": "Usage: FRAME:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetAnchor": "Usage: anchor = FRAME:GetAnchor()",
        "GetInitialDims": "Usage: dims = FRAME:GetInitialDims();",
        "SetInteractable": "Usage: FRAME:SetInteractable(true/false)",
        "QueueParam": "Usage: FRAME:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetDims": "Usage: dims = FRAME:GetDims();",
        "MoveTo": "Usage: FRAME:MoveTo(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "GetChildCount": "Usage: count = FRAME:GetChildCount()",
        "Hide": "Usage: success = FRAME:Hide([invis, delay])",
        "QueueMove": "Usage: FRAME:QueueMove(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "ParamTo": "Usage: FRAME:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: FRAME:SetParam(\"name\", value);",
        "GetDistance": "Invalid Element - Element Destroyed?",
        "ReleaseFocus": "Usage: success = FRAME:ReleaseFocus();",
        "SetDims": "Usage: FRAME:SetDims(dims);",
        "SetDepth": "Usage: FRAME:SetDepth(depth);",
        "SetScaleRamp": "Invalid Element - Element Destroyed?",
        "SetScale": "Invalid Element - Element Destroyed?",
        "GetCursorPos": "Usage: {x,y} = FRAME:GetCursorPos();",
        "GetChild": "Usage: child = FRAME:GetChild(name or index)",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishParam": "Usage: FRAME:FinishParam(\"name\");",
        "GetTag": "Usage: tag = FRAME:GetTag()",
        "SetDistanceLatch": "Invalid Element - Element Destroyed?",
        "SetFocalMode": "Invalid Element - Element Destroyed?",
        "GetInfo": "Usage: name, type = FRAME:GetInfo()",
        "IsVisible": "Usage: vis = FRAME:IsVisible()",
        "SetFocus": "Usage: success = FRAME:SetFocus();",
        "Rotate": "Invalid Element - Element Destroyed?",
        "RepeatParams": "Usage: FRAME:RepeatParamAnims(\"name\", num_previous);",
        "GetParam": "Usage: value = FRAME:GetParam(\"name\");"
    },
    "Sinvironment": {
        "LoadCharacterOverlay": "Usage: Sinvironment.LoadCharacterOverlay(modelId, slot, { overlayRecordId, color1, color2, opacity })",
        "GetLightAnchor": "Usage: anchor = Sinvironment.GetLightAnchor(lightId)",
        "SetCameraFoV": "Usage: Sinvironment.SetCameraFoV(fovDegrees);",
        "EndPlaceTattoo": "Usage: Sinvironment.EndPlaceTattoo(accept);",
        "ShaderParamModelTo": "Usage: Sinvironment.ShaderParamModelTo(modelId, paramId, value, duration, [delay, smooth_type, finish?]);",
        "SetLightColor": "Usage: Sinvironment.SetLightColor(lightId, r, g, b[, colorIntensity]",
        "GetModelShaderParamID": "Usage: ShaderParamId = Sinvironment.GetModelShaderParamID(modelId, shaderParamName); -- CAN BE NIL",
        "PreviewVoice": "Usage: success = Sinvironment.PreviewVoice(voiceId)",
        "GetNumFixedCamera": "",
        "SetPatternKeyState": "Usage: Sinvironment.SetPatternKeyState(key, pressed);",
        "CreateLight": "",
        "BeginEditPattern": "Usage: Sinvironment.BeginEditPattern(modelId, patterns, editingPatternIdx);",
        "ForceHighlightVisibility": "Usage: Sinvironment.ForceHighlightVisibility(modelId, enabled)",
        "SetPatternTransform": "Usage: Sinvironment.SetPatternTransform(transform);",
        "GetOrnamentVisuals": "Usage: (visualRecordIds, displayAngle) = Sinvironment.GetOrnamentVisuals(ornamentsGroupId, battleframeId, race, sex)",
        "SetModelScale": "Usage: Sinvironment.SetModelScale(modelId, scale);",
        "SetCharacterVisualOverride": "Usage: Sinvironment.SetCharacterVisualOverride(modelId, slot, visualOverrideId)",
        "GetModelScale": "Usage: scale = Sinvironment.GetModelScale(modelId);",
        "SetTattooTextureOnSceneObject": "Usage: aspectRatio = Sinvironment.SetTattooTexture(sceneObject, tattooDecalId);",
        "SetCharacterSex": "Usage: Sinvironment.SetCharacterSex(modelId, sex);",
        "GetLoadingProgress": "",
        "QueueModelOrientation": "Usage: Sinvironment.QueueModelOrientation(modelId, {axis,angle}, duration, [delay, smooth_type, finish?]);",
        "SetActiveWeapon": "Usage: Sinvironment.SetActiveWeapon(modelId, weaponIdx=[holstered|primary|secondary], swap);",
        "SetContextVisibility": "Usage: Sinvironment.SetContextVisibility(contextName, visible); - shows or hides props belonging to the context in a self-contained zone",
        "SetGradients": "Usage: Sinvironment.SetGradients(modelId, tattooGradientGroupIds);",
        "PlayModelAnimation": "Usage: Sinvironment.PlayModelAnimation(modelId, animationName);",
        "SetTattooMatrix": "Usage: Sinvironment.SetTattooMatrix(matrix);",
        "ScaleModelTo": "Usage: Sinvironment.ScaleModelTo(modelId, scale, duration, [delay, smooth_type, finish?]);",
        "EndEditPattern": "Usage: Sinvironment.EndEditPattern(action); with action = 'accept', 'revert' or 'delete'",
        "SetMorphWeights": "Usage: Sinvironment.SetMorphWeights(modelId, morphWeights);",
        "LoadCharacterComponent": "Usage: Sinvironment.LoadCharacterComponent(modelId, slot, componentId);",
        "Activate": "Usage: Sinvironment.Activate(show);",
        "OrientModelTo": "Usage: Sinvironment.OrientationModelTo(modelId, {axis,angle}, duration, [delay, smooth_type, finish?]);",
        "IsValidModel": "Usage: true/false = Sinvironment.IsValidModel(modelId);",
        "GetModelAlpha": "Usage: scale = Sinvironment.GetModelAlpha(modelId);",
        "ConvertZoneNPCsToModels": "Usage: modelInfoArray = Sinvironment.ConvertZoneNPCsToModels(LOD, outlines = true); - converts all NPC/monster models from a self-contained zone to SIN display models",
        "BeginPickTattooPosition": "",
        "SetLightFadeParams": "Usage: Sinvironment.ParamTo(lightId, fadeInStart, fadeInEnd, fadeOutStart, fadeOutEnd);",
        "LoadCharacterEyes": "Usage: Sinvironment.LoadCharacterEyes(modelId, eyeRecordId);",
        "SetTattooKeyState": "Usage: Sinvironment.SetTattooKeyState(key, pressed);",
        "ResetCharacterEmissive": "Usage: Sinvironment.ResetCharacterEmissive(modelId, handle, fadeOutDurationSec);",
        "GetHardpointUIPosition": "Usage: hardpointPosition = Sinvironment.GetHardpointUIPosition(modelID, hpName, [xOffset], [yOffset])",
        "SetModelShaderParam": "Usage: Sinvironment.SetModelShaderParam(modelId, paramId, value);",
        "SetModelLOD": "Usage: Sinvironment.SetModelLOD(modelId, LOD)",
        "SetModelMaterialOverride": "Usage: Sinvironment.SetModelMaterialOverride(modelId);",
        "SetLightFovXYSoftness": "Usage: Sinvironment.ParamTo(lightId, fovx[, fovy, softness]);",
        "SetCharacterFrameLevel": "Usage: Sinvironment.SetCharacterFrameLevel(modelId, frameLevel);",
        "GetModelOrientation": "Usage: {axis,angle} = Sinvironment.GetModelOrientation(modelId);",
        "SetModelPosition": "Usage: Sinvironment.SetModelPosition(modelId, {x,y,z});",
        "PositionModelTo": "Usage: Sinvironment.PositionModelTo(modelId, {x,y,z}, duration, [delay, smooth_type, finish?]);",
        "RemoveModel": "Usage: Sinvironment.RemoveModel(modelId);",
        "SetFixedCameraID": "Usage: Sinvironment.SetFixedCamera(camera_id);",
        "LoadItemType": "Usage: Sinvironment.LoadItemType(modelId, itemTypeId);",
        "QueueModelScale": "Usage: Sinvironment.QueueModelScale(modelId, scale, duration, [delay, smooth_type, finish?]);",
        "EnableFullBodyHighlight": "Usage: Sinvironment.EnableFullBodyHighlight(modelId, enabled)",
        "SetModelOrientation": "Usage: Sinvironment.SetModelOrientation(modelId, {axis,angle});",
        "QueueModelAlpha": "Usage: Sinvironment.QueueModelAlpha(modelId, alpha, duration, [delay, smooth_type, finish?]);",
        "EndPickTattooPosition": "",
        "IsActive": "",
        "LoadCharacterOrnament": "Usage: Sinvironment.LoadCharacterOrnament(modelId, slot, ornamentsGroupId)",
        "LoadZone": "Sinvironment is not active (test with Sinvironment.IsActive())",
        "SetManualCamera": "Usage: Sinvironment.SetManualCamera(pos={x,y,z}, aimAt={x,y,z} [, transition_time=0, smooth_type=<'smooth', 'ease-in', 'ease-out', 'linear'>]);",
        "QueueModelPosition": "Usage: Sinvironment.QueueModelPosition(modelId, {x,y,z}, duration, [delay, smooth_type, finish?]);",
        "SetCharacterEmissive": "Usage: handle = Sinvironment.SetCharacterEmissive(modelId, priority, emissiveColorOpacity, fadeInDurationSec, [pulseDurationSec], [pulseColorOpacity]);",
        "FinishModelScale": "Usage: Sinvironment.FinishModelScale(modelId);",
        "GetManualCamera": "",
        "FinishModelAlpha": "Usage: Sinvironment.FinishModelAlpha(modelId);",
        "SetModelAnimationParameter": "Usage: Sinvironment.SetModelAnimationParameter(modelId, parameterName, parameterValue);",
        "GetTattooMatrix": "",
        "SetAnimatedCamera": "Usage: Sinvironment.SetAnimatedCamera(model_id, hard_point_name);",
        "GetModelAnchor": "Usage: anchor = Sinvironment.GetModelAnchor(modelId)",
        "GetPatternTransform": "",
        "CreateModel": "Usage: model = Sinvironment.CreateModel(LOD, outlines = true);",
        "EnableMouseFocus": "Usage: Sinvironment.EnableMouseFocus(modelId, enabled)",
        "SetModelAlpha": "Usage: Sinvironment.SetModelAlpha(modelId, alpha);",
        "GetModelBounds": "Usage: {x, y, z, width, depth, height} = Sinvironment.GetModelBounds(modelId)",
        "BeginPlaceTattoo": "Usage: Sinvironment.BeginPlaceTattoo(modelId, tattooDecalId, usage);",
        "RemoveLight": "Usage: Sinvironment.RemoveLight(lightId);",
        "SetCharacterWarpaint": "Usage: Sinvironment.SetCharacterWarpaint(modelId, warpaint_table)",
        "GetModelPosition": "Usage: {x,y,z} = Sinvironment.GetModelPosition(modelId);",
        "SetTattoos": "Usage: Sinvironment.SetTattoos(modelId, tattooArray, usage);",
        "GetFixedCameraInfo": "Usage: Sinvironment.SetFixedCamera(camera_id);",
        "EnableSelectionHighlight": "Usage: Sinvironment.EnableSelectionHighlight(modelId, enabled)",
        "FinishModelOrientation": "Usage: Sinvironment.FinishModelOrientation(modelId);",
        "SetPatterns": "Usage: Sinvironment.SetPatterns(modelId, patternArray);",
        "AlphaModelTo": "Usage: Sinvironment.AlphaModelTo(modelId, alpha, duration, [delay, smooth_type, finish?]);",
        "FinishModelPosition": "Usage: Sinvironment.FinishModelPosition(modelId);"
    },
    "Button": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "Show": "Usage: WIDGET:Show([vis])",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetType": "Usage: type = WIDGET:GetType()",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "GetId": "Usage: id = WIDGET:GetId()",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetText": "Usage: text = WIDGET:GetText()",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "Switch": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "Enable": "Invalid Element - Element Destroyed?",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "SetAutoSize": "Invalid Element - Element Destroyed?",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "Show": "Usage: WIDGET:Show([vis])",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "SetTextKey": "Usage: SWITCH:SetTextKey(id, key)",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "GetSelectionId": "Invalid Element - Element Destroyed?",
        "SetSectionText": "Usage: SWITCH:SetKey(id, text)",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "GetId": "Usage: id = WIDGET:GetId()",
        "SetIconSpacing": "Usage: SWITCH:SetIconSpacing(size)",
        "Disable": "Invalid Element - Element Destroyed?",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "SetSelection": "Usage: SWITCH:SetSelection(id)",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "GetContentBounds": "Usage: {width, height} = SWITCH:GetContentBounds()",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "SetIcon": "Usage: SWITCH:SetIcon(position, texture, [region])",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetText": "Usage: text = WIDGET:GetText()",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "FullscreenFrame": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetInitialDims": "Usage: dims = FRAME:GetInitialDims();",
        "GetDims": "Usage: dims = FRAME:GetDims();",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "Hide": "Usage: success = FRAME:Hide([invis, delay])",
        "GetChild": "Usage: child = FRAME:GetChild(name or index)",
        "GetChildCount": "Usage: count = FRAME:GetChildCount()",
        "QueueMove": "Usage: FRAME:QueueMove(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: FRAME:SetParam(\"name\", value);",
        "GetInfo": "Usage: name, type = FRAME:GetInfo()",
        "FinishParam": "Usage: FRAME:FinishParam(\"name\");",
        "SetStretch": "Usage: FRAME:SetStretch(stretch);",
        "BindEvent": "Usage: FRAME:BindEvent(event_name, function_name or function_ref);",
        "Show": "Usage: success = FRAME:Show([vis,delay])",
        "IsVisible": "Usage: vis = FRAME:IsVisible()",
        "GetTag": "Usage: tag = FRAME:GetTag()",
        "SetTexture": "Usage: FRAME:SetTexture(texture [, region]);",
        "GetDepth": "Usage: depth = FRAME:GetDepth();",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "GetName": "Usage: name = FRAME:GetName()",
        "MoveTo": "Usage: FRAME:MoveTo(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "SetDepth": "Usage: FRAME:SetDepth(depth);",
        "ParamTo": "Usage: FRAME:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "CycleParam": "Usage: FRAME:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "SetDims": "Usage: FRAME:SetDims(dims);",
        "SetEatsMice": "Usage: FRAME:SetEatsMice(eatsMice);",
        "QueueParam": "Usage: FRAME:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: FRAME:RepeatParamAnims(\"name\", num_previous);",
        "GetParam": "Usage: value = FRAME:GetParam(\"name\");"
    },
    "Mail": {
        "GetResourceInfo": "success = Player.GetResourceInfo(sdb_id, resource_id)",
        "SendMessage": "",
        "GetInventory": "",
        "GetItemInfo": "usage: info = Mail.GetItemInfo(itemId)"
    },
    "Bar": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "PoofEffect": "Usage: OBJECT:PoofEffect(low_p, hi_p [, duration])",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "Show": "Usage: WIDGET:Show([vis])",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "ClearEffects": "Usage: OBJECT:ClearEffects()",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "SetRegions": "Usage: OBJECT:SetRegions([fgregion, bgregion])",
        "GetText": "Usage: text = WIDGET:GetText()",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "GetId": "Usage: id = WIDGET:GetId()",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "FlipBook": {
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "GetCurrentFrame": "Usage: frame = FLIPBOOK:GetCurrentFrame()",
        "GetText": "Usage: text = WIDGET:GetText()",
        "InvertHorizontal": "Invalid Element - Element Destroyed?",
        "SetFrame": "Usage: FLIPBOOK:SetFrame(frame)",
        "GetRegion": "Invalid Element - Element Destroyed?",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "Show": "Usage: WIDGET:Show([vis])",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "SetRegion": "Usage: STILL_ART:SetRegion(region)",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "GetFrameCount": "Usage: frameCount = FLIPBOOK:GetFrameCount()",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "GetId": "Usage: id = WIDGET:GetId()",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");",
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetSpeed": "Usage: speed = FLIPBOOK:GetSpeed()",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "GetTexture": "Invalid Element - Element Destroyed?",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "InvertVertical": "Invalid Element - Element Destroyed?",
        "GetName": "Usage: name = WIDGET:GetName()",
        "Pause": "Usage: FLIPBOOK:Pause()",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "Reset": "Usage: FLIPBOOK:Reset()",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "IsRunning": "Usage: running = FLIPBOOK:IsRunning()",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "Play": "Usage: FLIPBOOK:Play([speed_mult, loops, hideOnComplete])",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "SetTexture": "Usage: STILL_ART:SetTexture(name [, region])",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "Stop": "Usage: FLIPBOOK:Stop()",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();"
    },
    "HudFrame": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetDims": "Usage: dims = FRAME:GetDims();",
        "GetInitialDims": "Usage: dims = FRAME:GetInitialDims();",
        "GetChildCount": "Usage: count = FRAME:GetChildCount()",
        "GetDepth": "Usage: depth = FRAME:GetDepth();",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: FRAME:SetParam(\"name\", value);",
        "GetInfo": "Usage: name, type = FRAME:GetInfo()",
        "QueueMove": "Usage: FRAME:QueueMove(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "GetTag": "Usage: tag = FRAME:GetTag()",
        "Hide": "Usage: success = FRAME:Hide([invis, delay])",
        "SetDims": "Usage: FRAME:SetDims(dims);",
        "IsVisible": "Usage: vis = FRAME:IsVisible()",
        "FinishParam": "Usage: FRAME:FinishParam(\"name\");",
        "Show": "Usage: success = FRAME:Show([vis,delay])",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "GetName": "Usage: name = FRAME:GetName()",
        "MoveTo": "Usage: FRAME:MoveTo(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "SetDepth": "Usage: FRAME:SetDepth(depth);",
        "ParamTo": "Usage: FRAME:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "CycleParam": "Usage: FRAME:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetChild": "Usage: child = FRAME:GetChild(name or index)",
        "BindEvent": "Usage: FRAME:BindEvent(event_name, function_name or function_ref);",
        "QueueParam": "Usage: FRAME:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: FRAME:RepeatParamAnims(\"name\", num_previous);",
        "GetParam": "Usage: value = FRAME:GetParam(\"name\");"
    },
    "TextureFrame": {
        "GetCursorPos": "Usage: {x,y} = FRAME:GetCursorPos();",
        "GetTexture": "Invalid Element - Element Destroyed?",
        "SetFocus": "Usage: success = FRAME:SetFocus();",
        "BindEvent": "Usage: FRAME:BindEvent(event_name, function_name or function_ref);",
        "GetDepth": "Usage: depth = FRAME:GetDepth();",
        "GetName": "Usage: name = FRAME:GetName()",
        "SetDepth": "Usage: FRAME:SetDepth(depth);",
        "CycleParam": "Usage: FRAME:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "SetRegion": "Usage: TEXTURE_FRAME:SetRegion(region)",
        "GetDims": "Usage: dims = FRAME:GetDims();",
        "GetChild": "Usage: child = FRAME:GetChild(name or index)",
        "GetInitialDims": "Usage: dims = FRAME:GetInitialDims();",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: FRAME:SetParam(\"name\", value);",
        "GetInfo": "Usage: name, type = FRAME:GetInfo()",
        "ReleaseFocus": "Usage: success = FRAME:ReleaseFocus();",
        "Show": "Usage: success = FRAME:Show([vis,delay])",
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetTag": "Usage: tag = FRAME:GetTag()",
        "IsVisible": "Usage: vis = FRAME:IsVisible()",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "SetTexture": "Usage: TEXTURE_FRAME:SetTexture(name [, region])",
        "FinishParam": "Usage: FRAME:FinishParam(\"name\");",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "Hide": "Usage: success = FRAME:Hide([invis, delay])",
        "MoveTo": "Usage: FRAME:MoveTo(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "SetDims": "Usage: FRAME:SetDims(dims);",
        "ParamTo": "Usage: FRAME:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "QueueMove": "Usage: FRAME:QueueMove(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "GetChildCount": "Usage: count = FRAME:GetChildCount()",
        "GetRegion": "Invalid Element - Element Destroyed?",
        "QueueParam": "Usage: FRAME:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: FRAME:RepeatParamAnims(\"name\", num_previous);",
        "GetParam": "Usage: value = FRAME:GetParam(\"name\");"
    },
    "Animation": {
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "GetNumObjects": "Usage: count = ANIMATION:GetNumObjects()",
        "GetText": "Usage: text = WIDGET:GetText()",
        "GetRegion": "Invalid Element - Element Destroyed?",
        "SetBinding": "Usage: ANIMATION:SetBinding(binding)",
        "Show": "Usage: WIDGET:Show([vis])",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "SetRegion": "Usage: index = ANIMATION:SetRegion(region)",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetPercent": "Usage: ANIMATION:SetPercent(percent)",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "SetObjectTexture": "Usage: index = ANIMATION:SetObjectTexture(objidx, texture [, region])",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "GetId": "Usage: id = WIDGET:GetId()",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");",
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "GetTexture": "Invalid Element - Element Destroyed?",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "GetName": "Usage: name = WIDGET:GetName()",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "SetObjectRegion": "Usage: index = ANIMATION:SetObjectRegion(objidx, region)",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "FindObject": "Usage: index = ANIMATION:FindObject(name)",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "GetPercent": "Usage: percent = ANIMATION:GetPercent()",
        "Play": "Usage: ANIMATION:Play(start_percent, stop_percent, duration_sec [, loop, smooth_type])",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "PlayTo": "Usage: ANIMATION:PlayTo(stop_percent, duration_sec [, delay_sec, smooth_type])",
        "GetTrack": "Usage: start, end = ANIMATION:GetTrack(trackname)",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "SetTexture": "Usage: index = ANIMATION:SetTexture(texture [, region])",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "GetDefaultDuration": "Usage: duration_sec = ANIMATION:GetDefaultDuration()",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();"
    },
    "DialogFrame": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetInitialDims": "Usage: dims = FRAME:GetInitialDims();",
        "GetDims": "Usage: dims = FRAME:GetDims();",
        "SetDims": "Usage: FRAME:SetDims(dims);",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "QueueMove": "Usage: FRAME:QueueMove(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "GetChild": "Usage: child = FRAME:GetChild(name or index)",
        "SetFocus": "Usage: success = FRAME:SetFocus();",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: FRAME:SetParam(\"name\", value);",
        "GetInfo": "Usage: name, type = FRAME:GetInfo()",
        "ReleaseFocus": "Usage: success = FRAME:ReleaseFocus();",
        "GetCursorPos": "Usage: {x,y} = FRAME:GetCursorPos();",
        "Hide": "Usage: success = FRAME:Hide([invis, delay])",
        "FinishParam": "Usage: FRAME:FinishParam(\"name\");",
        "IsVisible": "Usage: vis = FRAME:IsVisible()",
        "GetTag": "Usage: tag = FRAME:GetTag()",
        "Show": "Usage: success = FRAME:Show([vis,delay])",
        "GetDepth": "Usage: depth = FRAME:GetDepth();",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "GetName": "Usage: name = FRAME:GetName()",
        "MoveTo": "Usage: FRAME:MoveTo(dims (string or table), duration_s [, delay_s, smooth_type, finish?]);",
        "SetDepth": "Usage: FRAME:SetDepth(depth);",
        "ParamTo": "Usage: FRAME:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "CycleParam": "Usage: FRAME:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "BindEvent": "Usage: FRAME:BindEvent(event_name, function_name or function_ref);",
        "GetChildCount": "Usage: count = FRAME:GetChildCount()",
        "QueueParam": "Usage: FRAME:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: FRAME:RepeatParamAnims(\"name\", num_previous);",
        "GetParam": "Usage: value = FRAME:GetParam(\"name\");"
    },
    "Text": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "GetText": "Usage: text = WIDGET:GetText()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "Show": "Usage: WIDGET:Show([vis])",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "SetTextKey": "Usage: TEXT:SetTextKey(key)",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "SetFont": "Usage: TEXT:SetFont(fontName)",
        "GetName": "Usage: name = WIDGET:GetName()",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "GetLineHeight": "Usage: pixels = TEXT:GetLineHeight()",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "GetId": "Usage: id = WIDGET:GetId()",
        "SetAlignment": "Usage: TEXT:SetAlignment(dir, alignment)",
        "SetKerningMult": "Usage: TEXT:SetKerningMult(mult)",
        "GetNumLines": "Usage: numlines = TEXT:GetNumLines()",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "GetFont": "Usage: fontName = TEXT:GetFont()",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "GetAlignment": "Usage: TEXT:GetAlignment(dir)",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "GetTextDims": "Usage: {width, height, top, left, right, bottom} = TEXT:GetTextDims([testString, clipping])",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "SetLeadingMult": "Usage: TEXT:SetLeadingMult(mult)",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "Group": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "Show": "Usage: WIDGET:Show([vis])",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetType": "Usage: type = WIDGET:GetType()",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "GetId": "Usage: id = WIDGET:GetId()",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetText": "Usage: text = WIDGET:GetText()",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "System": {
        "GetUniqueBuildID": "",
        "InvertMouse": "Usage: System.InvertMouse(true/false);",
        "SetHitDingPitch": "Usage: System.SetHitDingPitch(percent);",
        "GetAdvancedSettingsEnabled": "",
        "GetHotfixInfo": "",
        "SwapGamepadThumbsticks": "Usage: System.SwapGamepadThumbsticks(true/false);",
        "SetUIVolume": "Usage: System.SetGameVolume(percent);",
        "SetModifierKey": "Usage: System.SetModifierKey('control'|'alt'|'disabled')",
        "GetRecommendedVideoQuality": "",
        "GameSFXVolume": "Usage: System.GameSFXVolume(percent);",
        "GetLocale": "",
        "GetKeycodeString": "Usage: display_string = System.GetKeycodeString(keycode)",
        "LogInstrumentation": "Usage: System.LogInstrumentation(action[, message, data])",
        "GetSettingsRange": "Usage: range = System.GetSettingsRange(category)",
        "GetModifierKey": "",
        "GetElapsedUnixTime": "Usage: seconds = System.GetElapsedUnixTime(unixTime);",
        "ApplyKeyBindings": "",
        "GetResInfo": "",
        "TakeScreenshot": "",
        "SetSettings": "Usage: success = System.SetSettings(category, value [, preset_index])",
        "SetViolenceSetting": "",
        "CanUserSeeBlood": "",
        "GetElapsedTime": "Usage: seconds = System.GetElapsedTime(timeStamp)",
        "GetSettings": "Usage: setting = System.GetSettings(category [, preset_index])",
        "PopUrl": "Usage: System.PopUrl(url)",
        "ScaleUi": "Usage: System.ScaleUi(percent)",
        "GetUISetMode": "",
        "GetGpuInfo": "",
        "GetConfig": "Usage: value = System.GetConfig(section, key)",
        "GetProtocolVersion": "",
        "Logout": "",
        "Reboot": "",
        "InvertGamepad": "Usage: System.InvertGamepad(true/false);",
        "Shutdown": "",
        "SetGameVolume": "Usage: System.SetGameVolume(percent);",
        "GetSupportedLanguages": "",
        "GetHotfixDownloadState": "",
        "PlaySoundOnActor": "Usage success = System.PlaySoundOnActor(name, objectId)",
        "GetFrameDuration": "",
        "SetHitDingVolume": "Usage: System.SetHitDingVolume(percent);",
        "GetCvar": "Usage: value = System.GetCvar(key, mode = \"normal\"(, \"default\", \"min_range\", \"max_range\"))",
        "SetMasterVolume": "Usage: System.SetMasterVolume(percent);",
        "GetKeyBindings": "Usage: {[action]={[i]={keycode, alt}} = System.GetKeyBindings(category, getDefaults);",
        "GetArg": "Usage: value = System.GetArg(key)",
        "ApplyRecommendedSettings": "",
        "IsDevMode": "",
        "GetEnvironment": "",
        "GetLastError": "",
        "AutoscaleUi": "Usage: System.AutoscaleUi(true/false)",
        "SetCurrentGpu": "Usage: System.SetCurrentGpu(gpuIndex)",
        "RefreshSettings": "",
        "EnableVsync": "",
        "GetDesktopResolution": "",
        "GetPrecisionTime": "",
        "SetLocale": "usage: System.SetLocale(lang)",
        "VsyncEnabled": "",
        "GetOperatorSetting": "Usage: url = System.GetOperatorSetting(id)",
        "PlaySound": "Usage success = System.PlaySound(name, delayMs = 0)",
        "GetBuildInfo": "",
        "BindKey": "Usage: success = System.BindKey(category, action, keyCode, alt, slot);",
        "LogPrecisionTime": "",
        "BlurMainScene": "Usage: System.BlurMainScene(true/false)",
        "Mute": "Usage: success = System.Mute(true/false);",
        "GetDate": "",
        "SetResolution": "Usage: success = System.SetResolution(width, height, [mode], [refresh])",
        "ApplySettings": "",
        "ListFullscreenResolutions": "",
        "TestResolution": "",
        "IsUnderMinSpec": "",
        "GetCurrentFps": "",
        "SetBattleChatterVolume": "Usage: System.SetBattleChatterVolume(percent);",
        "SetCvar": "Usage: System.SetCvar(key, value[, create=false])",
        "GetLocalUnixTime": "",
        "GetItemInfo": "Usage: info = System.GetItemInfo(itemTypeId)",
        "GetFictionDate": "",
        "GetClientTime": "",
        "BindDefaultKey": "Usage: success = System.BindDefaultKey(category, action, slot);",
        "SetMusicVolume": "Usage: System.SetMusicVolume(percent);",
        "SwapLocalCharacterAbilities": "USAGE: Component.SwapLocalCharacterAbilities(index1, index2)",
        "ReloadUI": "",
        "EnableSinTags": "Usage: System.EnableSinTags(true/false)",
        "SetDialogVolume": "Usage: System.SetDialogVolume(percent);"
    },
    "CheckBox": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "GetCheck": "Usage: check = WIDGET:GetCheck()",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "Show": "Usage: WIDGET:Show([vis])",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "GetId": "Usage: id = WIDGET:GetId()",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "SetCheck": "Usage: WIDGET:SetCheck(checked, [fromUser = false])",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetText": "Usage: text = WIDGET:GetText()",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "Player": {
        "GetMoneyBoostModifier": "",
        "GetTimePlayed": "",
        "GetTinkerIngredients": "Usage: {{},{}}, {{},{}} = Game.GetTinkerIngredients(plan_id, item_sdb_id or guid)",
        "GetTargetId": "",
        "IsInVehicle": "",
        "GetAttributeCategory": "Usage: statValue, scalar, formatString = Player.GetAttributeCategory(categoryId)",
        "GetAttribute": "Usage: statValue = Player.GetAttribute(statIndex, gearSlot)",
        "GetProgressionXpForFrame": "USAGE: { sdb_id, name, current_xp, level }=Player.GetProgressionXpForFrame( sdb_id )",
        "GetItemIdList": "",
        "GetCurrentProgressionXp": "",
        "GetUnlocks": "",
        "IsLocalCharacterId": "",
        "GetWallet": "",
        "IsInCinamaticMode": "",
        "EquipLoadout": "Usage: Player.EquipLoadout(loadout_id)",
        "GetPermissions": "",
        "GetAbilityInfo": "{abilityId, itemId, itemTypeId, name, description, iconId, duration, cooldown} = Player.GetAbilityInfo(abilityId)",
        "GetCharacterState": "",
        "RequestUnpause": "",
        "GetReputations": "",
        "GetConsumableItems": "",
        "GetLoadoutInfoByID": "",
        "GetWorkbenches": "",
        "GetHardpointChoices": "Usage: {[i]={name, id}} = Player.GetHardpointChoices(entityId, hardpointType)",
        "GetSinControlStatus": "",
        "RequestSalvageItems": "Usage: Player.RequestSalvageItems([{item_guid, item_sdb_id, quantity}, {...}, ...])",
        "GetInventory": "",
        "GetResourceInfo": "success = Player.GetResourceInfo(sdb_id, resource_id)",
        "GetLifeInfo": "",
        "RequestPlayerGearInfo": "Player.RequestPlayerGearInfo(user)",
        "ResetTutorialId": "Usage: Player.ResetTutorialId(tutorialId)",
        "GetTimedDailyRewardInfo": "",
        "GetLootDistributionEventStatus": "Usage: Player.GetLootDistributionEventStatus(lootEventId);",
        "GetPerkRespecs": "",
        "GetWeaponCharge": "",
        "GetAchievementIDs": "Usage: {ids}, lastIdx = Player.GetAchievementIDs(category_id)",
        "GetEnergy": "",
        "AbilityUpdatesLocked": "",
        "GetRespawnTimes": "",
        "GetAbilityState": "{inEffect, isReady[, requirements, resources]} = Player.GetAbilityState(abilityId)",
        "CanDetectResources": "",
        "GetInteractMenuChoices": "",
        "GetCurrentLoadout": "",
        "SwapInventoryBagSlots": "Usage: Player.SwapInventoryBagSlots(bagIdx1, bagSlotIdx1, bagIdx2, bagSlotIdx2, bagType)",
        "GetCurrentArchtype": "",
        "IsInCombat": "",
        "ActivateTech": "Usage: success = Player.ActivateTech(itemId, sdbItemId)",
        "GetItemInfo": "usage: info = Player.GetItemInfo(itemId[, slotted_modules_array])",
        "GetWeaponInfo": "",
        "GetCurrentOutpostId": "",
        "GetLeaveZoneCountdown": "",
        "GetAimPosition": "",
        "GetFakeItemIcons": "",
        "GetSalvageInfo": "USAGE: Player.GetSalvageInfo( itemType )",
        "GetSlottedItemAtIndex": "Usage: socketedModuleSdbId = Player.GetSlottedItemAtIndex(hostItemGuid, slotIndex)",
        "GetSelectedAbility": "",
        "GetUnlocksByType": "Usage: certs = Player.GetUnlocksByType( unlock_type )",
        "GetScoreBoard": "",
        "AbortCampaignMission": "Usage: success = Player.AbortCampaignMission(missionId);",
        "GetAllProgressionXp": "",
        "GetAttachmentId": "",
        "RequestTimedDailyRewardCommit": "",
        "EndInteraction": "",
        "GetCharacterId": "",
        "GetShoppingList": "",
        "SetInventoryBagAcceptTypes": "Usage: Player.SetInventoryBagAcceptTypes(bagIdx, item subtype or array, bagType)",
        "GetUnlockInfo": "Usage: {} = Player.GetUnlockInfo( type, unlock_id )",
        "GetAttachmentInfo": "",
        "GetQueueRestrictions": "",
        "GetReticleInfo": "",
        "RequestSlotModule": "Usage: Player.RequestSlotModule(item_guid, module_sdb_id, slot_index)",
        "GetSelfFeedbackPosition": "",
        "GetArmyId": "",
        "GetAvailableInteractives": "",
        "ExecuteTinkeringPlan": "Usage: Game.ExecuteTinkeringPlan(plan id, subtype inputs, array inputs)",
        "GetInventoryWeight": "",
        "GetEffectiveLevel": "",
        "GetLoadoutList": "",
        "GetPosition": "",
        "BeginInteraction": "Usage: success = Player.BeginInteraction(entityId)",
        "GetBattleFrameCerts": "Usage: certs = Player.GetBattleFrameCerts( battleframe_id )",
        "GetMissionInfo": "Usage: {name, description, status, objectives[]={name, description, active, completed, waypoint={name, x,y,z}}} = Player.GetMissionInfo(missionId);",
        "TestCollectPowerup": "Usage: success = Player.TestCollectPowerup(sdbItemId)",
        "RequestRepairItems": "Usage: Player.RequestRepairItems([item_guid, item_guid, ...])",
        "GetXPBoostModifier": "",
        "GetInteracteeInfo": "",
        "RequestSlotGear": "Usage: Player.RequestSlotGear(loadout_id, item_guid, slot_type_id)",
        "GetLevel": "",
        "GetInventoryItemsOfType": "USAGE: {item_sdb_ids} = Player.GetInventoryItemsOfType(subtype_id)",
        "GetSeat": "",
        "GetCampaignMissionIds": "",
        "GetAim": "",
        "GetTeamId": "",
        "RequestSelfRevive": "",
        "GetItemProperties": "invalid item guid or sdb ID passed",
        "RequestFrameLevelReset": "Usage: Player.RequestFrameLevelReset(frameSdbId)",
        "GetTimePlayedSeconds": "",
        "IsReady": "",
        "GetStatusEffects": "",
        "GetAbilityCharges": "success = Player.GetAbilityCharges(abilityId)",
        "GetSpectatorMode": "",
        "GetMissionIds": "",
        "GetGliderStatus": "",
        "RequestTimedDailyRewardRoll": "",
        "IsUsingGamepad": "",
        "GetCertByType": "Usage: certs = Player.GetCertByType( cert_type )",
        "GetReputationBoostModifier": "",
        "TryResumeTutorialChain": "",
        "RequestUnslotAllModules": "Usage: Player.RequestUnslotAllModules(item_guid)",
        "GetCombatState": "",
        "SetForcedAfk": "Usage: Player.SetForcedAfk(true/false)",
        "GetAbilities": "",
        "GetAllLootDistributionEvents": "",
        "GetInfo": "",
        "GetLoadoutInfo": "",
        "GetWeaponState": "",
        "GetLifetimeTotalXp": "",
        "IsDevChar": "",
        "SetAcceptOrRejectLoot": "Usage: Player.SetAcceptOrRejectLoot(id, acceptRejectOptionString)",
        "IsSpectating": "",
        "GetAchievementInfo": "",
        "SelectHardpoint": "Usage: Player.SelectHardpoint(selectionId)",
        "GetSinStatus": "",
        "IsUsingFlashlight": "",
        "GetLoadoutConstraintLevels": "Usage: {constraint_info} = Player.GetLoadoutConstraintLevels(loadout_id)",
        "GetInventoryBags": "",
        "SlotTech": "Usage: success = Player.SlotTech(itemId, sdbItemId, [index = <FIRST_CONSUMABLE_SLOT>])",
        "UpdateMissions": "",
        "GetAchievementSets": "Usage: {ids} = Player.GetAchievementSets(category_id)",
        "GetItemCount": "success = Player.GetItemCount(itemTypeId)",
        "GetVIPTime": "",
        "GetCurrentLoadoutWeb": "",
        "GetMailInventory": "",
        "RequestTeleport": "Usage: Player.RequestTeleport(x, y)",
        "GetCharacterInfo": "",
        "GetAchievementPointTotal": "",
        "PlaySinImprint": "Usage: Player.PlaySinImprint( achievement_id, vod_id )",
        "RequestPause": "",
        "SetInventoryBagName": "Usage: Player.SetInventoryBagName(bagIdx, name, bagType)",
        "IsInFirstPerson": "",
        "GetCurrentLoadoutId": "",
        "GetWeaponMode": "",
        "GetWeaponIndex": "",
        "GetJobStatus": "",
        "FlushCharacterCache": "Usage: Player.FlushCharacterCache({items=false, slotgear=false, xplevel=false, mission=false, all=false});",
        "GetResourceBoostModifier": "",
        "GetActiveDeployables": "",
        "GetCharacterCerts": ""
    },
    "Platoon": {
        "SetLootRecipients": "USAGE: Squad.SetLootRecipients(id, playerList)",
        "GetLFGFrame": "",
        "GetWayPoint": "",
        "GetIndexOf": "idx (or nil) = Squad.GetIndexOf(character_name)",
        "Leave": "",
        "AcceptInvite": "USAGE: success = Squad.AcceptInvite(leader)",
        "Promote": "USAGE: Squad.Promote(user_name)",
        "ClearWayPoint": "",
        "IsInPlatoon": "",
        "GetMaxPlatoonSize": "",
        "GetLeader": "",
        "IsLeaderOnSameInstance": "",
        "GetVitals": "",
        "Invite": "USAGE: Squad.Invite(user_name(, message))",
        "GetQueueRestrictions": "",
        "IsLeaderOnSameZone": "",
        "ConvertToPlatoon": "",
        "IsLeaderInPvP": "",
        "DeclineInvite": "USAGE: Squad.DeclineInvite(leader(, message))",
        "SetWayPoint": "USAGE: Squad.SetWayPoint(x, y, z)",
        "JoinLeader": "Could not find squad leader's zone\nUSAGE: success = Squad.JoinLeader()",
        "GetRoster": "",
        "Kick": "USAGE: Squad.Kick(user_name(, message))",
        "GetLootRules": "",
        "SetLFGFrame": "",
        "SetLootVoter": "USAGE: Squad.SetLootVoter(id, adding)"
    },
    "Arc": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "Show": "Usage: WIDGET:Show([vis])",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "SetRegion": "Usage: OBJECT:SetRegions([region])",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "GetId": "Usage: id = WIDGET:GetId()",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetText": "Usage: text = WIDGET:GetText()",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "Squad": {
        "IsLFG": "",
        "SetLootRecipients": "USAGE: Squad.SetLootRecipients(id, playerList)",
        "GetLFGFrame": "",
        "GetWayPoint": "",
        "GetIndexOf": "idx (or nil) = Squad.GetIndexOf(character_name)",
        "DeclineInvite": "USAGE: Squad.DeclineInvite(leader(, message))",
        "AcceptInvite": "USAGE: success = Squad.AcceptInvite(leader)",
        "Leave": "",
        "Promote": "USAGE: Squad.Promote(user_name)",
        "GetMaxSquadSize": "",
        "ClearWayPoint": "",
        "ConvertToSquad": "",
        "SetLFGFrame": "",
        "GetLeader": "",
        "IsLeaderOnSameInstance": "",
        "GetVitals": "",
        "Invite": "USAGE: Squad.Invite(user_name(, message))",
        "GetLootRules": "",
        "IsLeaderOnSameZone": "",
        "IsLeaderInPvP": "",
        "SetWayPoint": "USAGE: Squad.SetWayPoint(x, y, z)",
        "GetQueueRestrictions": "",
        "IsInSquad": "",
        "JoinLeader": "Could not find squad leader's zone\nUSAGE: success = Squad.JoinLeader()",
        "GetRoster": "",
        "Kick": "USAGE: Squad.Kick(user_name(, message))",
        "GetLFGCategoryId": "",
        "GetLeaderJobStatus": "",
        "SetLootVoter": "USAGE: Squad.SetLootVoter(id, adding)"
    },
    "Game": {
        "RequestVehicleMenu": "Usage: = Game.RequestVehicleMenu( station_id )",
        "GetVendorProductList": "USAGE: Game.GetVendorProductList( vendor_id )",
        "GetWorldObjectStatus": "Usage: status = Game.GetWorldObjectStatus(objId)",
        "GetWorldObjectInfo": "Usage: {name, position, radius, zoneId} = Game.GetWorldObjectInfo(objId)",
        "GetRecipeInfo": "USAGE: Game.GetRecipeInfo( recipe_id )",
        "RemoveRecipeFromCart": "USAGE: Game.RemoveRecipeFromCart( recipe_id )",
        "HighlightEntity": "Usage: Game.HighlightEntity(entityId[, shader_color_idx])",
        "GetResourceTypesList": "",
        "GetAvailableTargets": "",
        "GetKnownResourceLocations": "",
        "ChunkCoordToWorld": "Usage: {x,y,z} = Game.ChunkCoordToWorld(chunkX,chunkY,x,y[,z])",
        "ClearTrail": "Usage:Game.Game_ClearTrail(trail_Id);",
        "GetResourceScanInfo": "Usage: {x,y,z, ownerId, composition[i]={itemTypeId, percent}} = Game.GetResourceScanInfo(scanId);",
        "GetOverlayInfo": "Usage: {id, name, is_unlocked, is_hidden} = Game.GetOverlayInfo(overlay_id)",
        "RequestAddArcToLedger": "Usage: = Game.RequestAddArcToLedger( arc_id )",
        "GetGameVariable": "Usage: nil/float = Game.GetGameVariable(varName)",
        "GetCameraPos": "",
        "RequiredLevelForSlot": "Usage: Game.RequiredLevelForSlot(slotId)",
        "GetStatusEffectInfo": "invalid status effect handle",
        "GetFactionRangeIndex": "Usage index = Game.GetFactionRangeIndex(factionId, reputation)",
        "GetSubzoneNameAt": "Usage: Game.GetSubzoneNameAt(x,y);",
        "GetPvPQueue": "",
        "GetPerkModuleInfo": "",
        "GetResourceNodeCompleteResults": "",
        "GetFrameConstraintsMultipliers": "Usage: {mass={[i]={mass_pct, speed_mult}} } = Game.GetFrameConstraintsMultipliers(battleframe_type_id)",
        "ConfirmDuel": "USAGE: Game.ConfirmDuel( username, accepted )",
        "IsTargetAvailable": "Usage: available = Game.IsTargetAvailable(entityId)",
        "SetTrailColor": "Usage: Game.SetTrailColor(Trail_ID, R, G, B);",
        "RequestGlobalMilestoneInfo": "",
        "GetResourceTypeInfo": "Usage: {name, parentResourceTypeId} = Game.GetResourceTypeInfo( resourceTypeId )",
        "GetModuleTable": "USAGE: Usage: Game.GetModuleTable(ItemID)",
        "GetCertIdsAssociatedWithZone": "Usage certificateIds = Game.Game_GetCertIdsAssociatedWithZone(zoneId)",
        "ZoomWorldMap": "Usage: Game.ZoomWorldMap(percent);",
        "GetAccessoryInfo": "Usage: {} = Game.GetAccessoryInfo(accessory_id)",
        "GetLoadoutInfoByType": "Usage: {certificate_id, defaults_slots[name]={...}} = Game.GetLoadoutInfoByType(battleframe_type_id)",
        "FindServiceProvider": "Usage: Game.FindServiceProvider( service_name )",
        "StartItemSearch": "USAGE: search_id = Game.Game_StartItemSearch({ match_string=\"thermal cannon\", with_modules=true, item_type=\"weapon\", min_level=0, max_level=0, min_quality=\"salvage\", max_quality=\"legendary\", item_subtype=0, class_certs={0,0} })",
        "GetTargetIdByName": "Usage: entityId = Game.GetTargetIdByName(name)",
        "GetQuestGiverInfo": "Usage: = Game.GetQuestGiverInfo( quest_giver_id )",
        "GetCharacterColorsById": "Usage: {} = Game.GetCharacterColorsById(type_id)",
        "GetRecipe": "USAGE: Game.GetRecipe( recipe_id )",
        "IsModuleForItem": "Usage: bCanIsModuleForItem = Game.IsModuleForItem(moduleSdbId, hostItemSdbId)",
        "SetMapCruiseControl": "Usage: Game.SetMapCruiseControl(x, y, z);",
        "GetMorphWeightInfo": "Usage: { { index, name, min, max }, { index, name, min, max }, ... } = Game.GetMorphWeightInfo(race, gender)",
        "EquipExperimentalLoadout": "Usage: Game.EquipExperimentalLoadout(loadout id)",
        "GetVoiceListInfo": "",
        "GetWorldMapGlobeEntityId": "",
        "SetMapInputMode": "Usage: Game.SetMapInputMode(roam/cursor/ignore);",
        "SetTrailTitle": "Usage: Game.SetTrailColor(Trail_ID, title);",
        "GetPvPMatchId": "",
        "ClearWayPoint": "",
        "GetGlobeViewLocations": "",
        "GetLJobLedgerList": "",
        "GetNetworkState": "",
        "WorldToChunkCoord": "Usage: {chunkX,chunkY,x,y,z} = Game.WorldToChunkCoord(x,y[,z])",
        "SendUIMessageToEncounter": "Usage: success = Game.SendUIMessageToEncounter(encounterID, messageName, messageContents)",
        "SetTrailRefreshRate": "Usage: Game.SetTrailRefreshRate(Trail_ID, refresh_rate);",
        "GetDecalInfo": "Usage: {} = Game.GetDecalInfo(decal_id)",
        "GetZoneInfo": "Usage: {name, location} = Game.GetZoneInfo(zoneId)",
        "GetZoneId": "",
        "IsItemOfType": "Usage: bIsItemOfType = Game.IsItemOfType(itemSdbId, resourceTypeId[, maxDepth = 100])",
        "GetWayPoint": "",
        "RespondToServerQuery": "Usage: Game.RespondToServerQuery(query_id, option_name, retval)",
        "SpendTokenAtVendor": "Usage: Game.SpendTokenAtVendor(token_id)",
        "GetModuleSlotsForItem": "Usage: [array of color IDs] = Game.GetModuleSlotsForItem(itemSdbId);",
        "GetTargetVitals": "Usage: {Health, MaxHealth, health_pct} = Game.GetTargetVitals(entityId)",
        "RequestSpawnVehicle": "Usage: = Game.RequestSpawnVehicle( veh_id, station_id )",
        "SetRadarRange": "Usage: Game.SetRadarRange(meters);",
        "RequestStartArc": "Usage: = Game.RequestStartArc( arc_id )",
        "GetItemCraftingUnitsCost": "USAGE: Game.GetItemCraftingUnitsCost( item_sdb_id )",
        "RotateWorldMapGlobeToZone": "",
        "SendDialogResponse": "Usage: Game.SendDialogResponse(dialogId, responseIdx);",
        "GetTargetInfo": "Usage: {name, group, type, faction, hostile, bounds, ownerId, damageable, type} = Game.GetTargetInfo(entityId)",
        "GetCertificationInfo": "Usage: {id, name, description, xp, web_icon, cert_type, [yields]} = Game.GetCertificationInfo(certificationId)",
        "SpectateBomb": "SpectatePlayer only works in spectator mode",
        "GetSkinOverrideInfo": "Usage: {} = Game.GetSkinOverrideInfo(skin_override_id)",
        "CanUIActivateItem": "Usage: canActivate = Game.CanUIActivateItem(itemId, sdbItemId)",
        "GetProgressionUnlocks": "",
        "GetTabMapBounds": "",
        "GetWarpaintInfo": "Usage: {} = Game.GetWarpaintInfo(warpaint_id)",
        "GetLFGCategories": "",
        "GetRecipeList": "",
        "ReturnToPvE": "",
        "SetTrailAlpha": "Usage: Game.SetTrailColor(Trail_ID, alpha);",
        "GetTargetBoneInfo": "Usage: {pos} = Game.GetTargetBoneInfo(entityId, boneName)",
        "GetTinkerPlanInfo": "Usage: {name, etc.} = Game.GetTinkerPlanInfo(plan id)",
        "GetOrnamentInfo": "Usage: {} = Game.GetOrnamentInfo(ornament_id)",
        "GetHeadInfo": "Usage: {} = Game.GetHeadInfo(head_id)",
        "RequestTransfer": "Usage: success = Game.RequestTransfer(to_zoneId)",
        "BuildGlobalCharacterList": "",
        "RequestVendorProductList": "USAGE: Game.RequestVendorProductList( vendor_id )",
        "AcceptResourceScan": "Usage: success = Game.AcceptResourceScan(scanId, accepted);",
        "GetTokenVendorInfo": "USAGE: Game.GetTokenVendorInfo( vendor_id )",
        "EnableWorldMapGlobeView": "Usage: Game.EnableWorldMapGlobeView(enable);",
        "GetTargetBounds": "Usage: {x, y, z, length, width, height} = Game.GetTargetBounds(entityId, without_anims = false)",
        "GetLoadingProgress": "",
        "ListRoutes": "",
        "GetPerkInfo": "Usage: {name, description, web_icon, cost} = Game.GetPerkInfo(perkId)",
        "QueueForPvP": "Usage: Game.QueueForPvP(matchIds[, queue])",
        "QueueForLFG": "Usage: Game.QueueForLFG(category or {categories})",
        "GetSinCardFields": "Usage: fields = Game.GetSinCardFields(obj_id)",
        "GetFactionCount": "",
        "SlashCommand": "Usage: success = Game.SlashCommand(command);",
        "TryActivateMenu": "",
        "RequestRemoveArcFromLedger": "Usage: = Game.RequestRemoveArcFromLedger( arc_id )",
        "Unstuck": "",
        "GetExperimentalLoadouts": "",
        "GetTeams": "",
        "GetEncounterUiFields": "Usage: fields = Game.GetEncounterUiFields(enc_id)",
        "GetTeamInfo": "Usage: {armyId, hostile} = Game.GetTeamInfo(teamId);",
        "GetDamageTypeInfo": "Usage: info = Game.GetDamageTypeInfo(damageTypeId)",
        "SendMissionUiMessage": "Usage: Game.SendMissionUiMessage(message_str)",
        "GetMapCoordinates": "",
        "GetResourcePoolSize": "",
        "GetArcJobs": "Usage: = Game.GetArcJobs( board_id )",
        "RequestGlobalCount": "Usage: Game.RequestGlobalCount( leaderboard_name )",
        "SpectatePlayer": "Usage: = Player.SpectatePlayer( guid )",
        "GetTutorialChainInfo": "",
        "GetFoundMatch": "",
        "GetCurrentAnnouncements": "",
        "GetMapMarkerInfo": "",
        "RequestDuel": "USAGE: Game.RequestDuel( username )",
        "GetMapMarkerList": "",
        "IsWorldMapVisible": "",
        "IsTrackingRecipe": "USAGE: Game.IsTrackingRecipe( recipe_id )",
        "GetTinkerPlansForItem": "Usage: {plan id 1, plan id 2, ...} = Game.GetTinkerPlansForItem(item_sdb_id or guid)",
        "GetMatchLoadState": "",
        "GetFactionInfo": "Usage [info] = Game.GetFactionInfo(factionId)",
        "GetFreeTrailHandle": "",
        "SetMapCoordinates": "Usage: Game.SetMapCoordinates(x, y, z);",
        "ShowWorldMap": "Usage: Game.ShowWorldMap(show);",
        "GetPickingPosition": "",
        "CanItemGoInSlot": "Usage: bCanGoInSlot = Game.CanItemGoInSlot(itemSdbId, slotId)",
        "RequestCancelArc": "Usage: = Game.RequestCancelArc( arc_id )",
        "GetRootItemInfo": "USAGE: Game.GetRootItemInfo( item_id )",
        "SetMapFlightRoutes": "Usage: Game.SetMapFlightRoutes(routes);",
        "GetSpecializationCertificates": "",
        "JoinSquadLeadersArc": "",
        "GetVehicleMenu": "Usage: = Game.GetVehicleMenu( station_id )",
        "GetItemInfoByType": "Usage: info = Game.GetItemInfoByType(itemTypeId[, full_modules_array, slotted_modules_array])",
        "GetTargetRespawnTime": "Usage: {RemainingSeconds} = Game.GetTargetRespawnTime(entityId)",
        "GetTargetStatus": "Usage: {inSin, visible, active, interact, voice, text, mission, target_lockable, target_locked} = Game.GetTargetStatus(entityId)",
        "GetTargetHardpoints": "Usage: hp_names = Game.GetTargetHardpoints(entityId)",
        "RequestKnownResourceLocations": "",
        "GetWarpaintPatternInfo": "Usage: {} = Game.GetWarpaintPatternInfo(warpaint_pattern_id)",
        "GetTargetCharacterInfo": "Usage: charInfo = Game.GetTargetCharacterInfo(entityId)",
        "GetResourceScanIds": "",
        "GetPreviewItemInfo": "USAGE: info = Game.GetPreviewItemInfo(item_info[, full_modules_array, slotted_modules_array])",
        "SetWayPoint": "Usage: Game.SetWayPoint(x, y, z);",
        "GetItemTypesOfResourceType": "Usage: {[i]=itemTypeId} = Game.GetItemTypesOfResourceType( resourceTypeId )",
        "CanTrackRecipe": "USAGE: bool = Game.CanTrackRecipe( recipe_id )",
        "AddRecipeToCart": "USAGE: bool = Game.AddRecipeToCart( recipe_id )",
        "ShowTrailTo": "Usage:{trailID} = Game.ShowTrailTo(Trail_ID,x,y,z[, play_sound=true]);",
        "GetArmyInfo": "Usage: {name, colors, iconId} = Game.GetArmyInfo(armyId)",
        "GetRecipeIds": "",
        "GetWorldObjectList": "",
        "GetCharacterTypeInfo": "Usage: charInfo = Game.GetCharacterTypeInfo(charTypeId)",
        "AcceptPvPMatch": "Usage: Game.AcceptPvPMatch(accept)",
        "RequestVendorPurchase": "USAGE: Game.RequestVendorPurchase( 'product_id' : product_id, 'price_id' : price_id, 'vendor_id': vendor_id)",
        "ClaimTokenVendorRewards": "Usage: Game.ClaimTokenVendorRewards(token_id)",
        "GetItemRepairCost": "USAGE: Game.GetItemRepairCost( item_sdb_id, damage_frac, [, cost_item_sdb_id = crystite] )",
        "IsInPvP": "",
        "GetTutorialCards": "Usage: Game.GetTutorialCards( tutorialId )"
    },
    "Movie": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPath": "Invalid Element - Element Destroyed?",
        "EnableLetterbox": "Usage: MOVIE:EnableLetterbox(boolean) TRUE:fit movie inside container, using letterbox, FALSE:allow movie to fill and extend outside of container",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "GetText": "Usage: text = WIDGET:GetText()",
        "GetShader": "Invalid Element - Element Destroyed?",
        "Load": "Usage: success = MOVIE:Load(source_file, [audio?, subsFile?])",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetMute": "Usage: mute = MOVIE:GetMute()",
        "SetMute": "Usage: MOVIE:SetMute(mute)",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "IsLoaded": "Usage: is_loaded = MOVIE:IsLoaded()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "GetId": "Usage: id = WIDGET:GetId()",
        "Show": "Usage: WIDGET:Show([vis])",
        "GetType": "Usage: type = WIDGET:GetType()",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "Unload": "Usage: MOVIE:Unload()",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "SetVolume": "Usage: MOVIE:SetVolume(volume)",
        "Pause": "Usage: MOVIE:Pause();",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "GetPercent": "Usage: percent = MOVIE:GetPercent()",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetPercent": "Usage: success = MOVIE:SetPercent(percent)",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "Play": "Usage: MOVIE:Play([loop?, start_percent, stop_percent, rate_mult]);",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "Stop": "Usage: MOVIE:Stop();",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "GetParam": "Usage: value = WIDGET:GetParam(\"name\");"
    },
    "Slider": {
        "GetBounds": "Usage: {left, top, right, bottom, width, height} = WIDGET:GetBounds(scaled=false)",
        "GetPath": "Invalid Element - Element Destroyed?",
        "SetTag": "Usage: WIDGET:SetTag(tag)",
        "SetText": "Usage: WIDGET:SetText(text)",
        "SetUnderline": "Usage: WIDGET:SetUnderline(bool)",
        "GetInitialDims": "Usage: dims = WIDGET:GetInitialDims();",
        "HasFocus": "Usage: bool = WIDGET:HasFocus()",
        "SetFocus": "Usage: success = WIDGET:SetFocus()",
        "GetScrollSteps": "Usage: steps = SLIDER:GetScrollSteps()",
        "SetScrollSteps": "Usage: SLIDER:SetScrollSteps(steps)",
        "GetShader": "Invalid Element - Element Destroyed?",
        "GetChildCount": "Usage: count = WIDGET:GetChildCount()",
        "GetFosterParent": "Usage: foster_parent(WIDGET/path-string), foster_level = WIDGET:GetFosterParent()",
        "Hide": "Usage: WIDGET:Hide([invis])",
        "SetClipChildren": "Usage: WIDGET:SetClipChildren(bool)",
        "AddLockoutTag": "Usage: WIDGET:AddLockoutTag(tag)",
        "GetText": "Usage: text = WIDGET:GetText()",
        "GetTag": "Usage: tag = WIDGET:GetTag()",
        "GetId": "Usage: id = WIDGET:GetId()",
        "GetParent": "Usage: parent = WIDGET:GetParent()",
        "GetName": "Usage: name = WIDGET:GetName()",
        "GetJumpSteps": "Usage: steps = SLIDER:GetJumpSteps()",
        "Show": "Usage: WIDGET:Show([vis])",
        "GetMaxPercent": "Usage: percent = SLIDER:GetMaxPercent()",
        "GetFrame": "Usage: frame = WIDGET:GetFrame()",
        "GetType": "Usage: type = WIDGET:GetType()",
        "FinishParam": "Usage: WIDGET:FinishParam(\"name\");",
        "GetFosterChildCount": "Usage: count = WIDGET:GetFosterChildCount()",
        "GetMinPercent": "Usage: percent = SLIDER:GetMinPercent()",
        "GetClipChildren": "Usage: bool = WIDGET:GetClipChildren()",
        "GetPercent": "Usage: percent = SLIDER:GetPercent()",
        "SetPercent": "Usage: SLIDER:SetPercent(percent)",
        "GetSteps": "Usage: step_count = SLIDER:GetSteps()",
        "SetJumpSteps": "Usage: SLIDER:SetJumpSteps(steps)",
        "GetDims": "Usage: dims = WIDGET:GetDims([final]);",
        "SetMaxPercent": "Usage: SLIDER:SetMaxPercent(percent)",
        "EatMice": "Usage: WIDGET:EatMice(eat);",
        "IsMouseEater": "Usage: bool = WIDGET:IsMouseEater();",
        "GetChild": "Usage: child = WIDGET:GetChild(name or index)",
        "QueueMove": "Usage: WIDGET:QueueMove(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetMinPercent": "Usage: SLIDER:SetMinPercent(percent)",
        "SetParam": "Usage: WIDGET:SetParam(\"name\", value);",
        "SetTextColor": "Usage: WIDGET:SetTextColor(fg [, bg, start_pos, end_pos])",
        "ReleaseFocus": "Usage: success = WIDGET:ReleaseFocus()",
        "SetSteps": "Usage: SLIDER:SetSteps(step_count)",
        "GetInfo": "Usage: id, name, type = WIDGET:GetInfo()",
        "GetChildIndex": "Invalid Element - Element Destroyed?",
        "IsVisible": "Usage: vis = WIDGET:IsVisible()",
        "SetCursor": "Usage: WIDGET:SetCursor(cursor_name)",
        "GetCursor": "Invalid Element - Element Destroyed?",
        "RemoveLockoutTag": "Usage: WIDGET:RemoveLockoutTag(tag)",
        "RepeatMoves": "Usage: WIDGET:RepeatMoves( num_previous );",
        "FinishMove": "Usage: WIDGET:FinishMove();",
        "MoveTo": "Usage: WIDGET:MoveTo(dim_string, duration_s [, delay_s , smooth_type, finish?]);",
        "SetDims": "Usage: WIDGET:SetDims(dims (string or table));",
        "ParamTo": "Usage: WIDGET:ParamTo(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "CycleParam": "Usage: WIDGET:CycleParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "BindEvent": "Usage: WIDGET:BindEvent(event_name, function_name);",
        "RepeatParams": "Usage: WIDGET:RepeatParams(\"name\", num_previous);",
        "QueueParam": "Usage: WIDGET:QueueParam(\"name\", value, duration, [delay, smooth_type, finish?]);",
        "SetShader": "Usage: WIDGET:SetShader(shaderID)"
    },
    "info": {
        "ver": "designprod-1008",
        "level": 0,
        "env": "publictest"
    }
}